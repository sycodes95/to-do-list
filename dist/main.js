(()=>{"use strict";const e=function(e){document.getElementById("taskButton").style.visibility="hidden",document.querySelector(".taskFormContainer").style.visibility="hidden",document.querySelector(".contentHeader").textContent="All";const t=document.querySelector(".taskContainer");t.innerHTML="",e.forEach(((o,r)=>{let n=o.tasks;n.forEach(((o,r)=>{console.log(o);let l=document.createElement("div");l.classList.add("task"),t.appendChild(l);let i=document.createElement("input");i.classList.add("taskTitle"),i.value=o.title,l.appendChild(i);let a=document.createElement("input");a.classList.add("taskDescription"),a.value=o.description,l.appendChild(a);let c=document.createElement("select");c.classList.add("taskPriority"),l.appendChild(c),c.addEventListener("change",(t=>{"No Priority"==t.currentTarget.value?(t.currentTarget.value=s.value,o.priority=t.currentTarget.value,l.style.borderColor="black",console.log(e),s.blur(),localStorage.setItem("myProjects",JSON.stringify(e))):"Low Priority"==t.currentTarget.value?(t.currentTarget.value=d.value,o.priority=t.currentTarget.value,l.style.borderColor="green",console.log(e),d.blur(),localStorage.setItem("myProjects",JSON.stringify(e))):"High Priority"==t.currentTarget.value&&(t.currentTarget.value=u.value,o.priority=t.currentTarget.value,l.style.borderColor="red",console.log(e),u.blur(),localStorage.setItem("myProjects",JSON.stringify(e)))}));let s=document.createElement("option");s.classList.add("noPriority"),s.value="No Priority",s.textContent="No Priority",c.appendChild(s);let d=document.createElement("option");d.classList.add("lowPriority"),d.value="Low Priority",d.textContent="Low Priority",c.appendChild(d);let u=document.createElement("option");u.classList.add("highPriority"),u.value="High Priority",u.textContent="High Priority",c.appendChild(u);let y=document.createElement("input");y.classList.add("showDueDate"),y.type="Date",y.value=o.dueDate,l.appendChild(y),y.addEventListener("change",(t=>{t.currentTarget.value=y.value,o.dueDate=t.currentTarget.value,console.log(o),localStorage.setItem("myProjects",JSON.stringify(e))})),i.addEventListener("keypress",(t=>{"Enter"==t.key&&(o.title=i.value,o.description=a.value,o.priority=c.value,o.dueDate=y.value,console.log(e),i.blur(),localStorage.setItem("myProjects",JSON.stringify(e)))})),a.addEventListener("keypress",(t=>{"Enter"==t.key&&(o.title=i.value,o.description=a.value,o.priority=c.value,o.dueDate=y.value,console.log(e),a.blur(),localStorage.setItem("myProjects",JSON.stringify(e)))})),"High Priority"==o.priority?(l.style.borderColor="red",u.selected=!0):"Low Priority"==o.priority?(l.style.borderColor="green",d.selected=!0):l.style.borderColor="black";let m=document.createElement("button");m.classList.add("taskDelete"),m.textContent="Delete",l.appendChild(m),m.addEventListener("click",(()=>{n.splice(r,1),l.remove(),console.log(r),console.log(o),console.log(n)}))}))}))};let t;null!==localStorage?(t=JSON.parse(localStorage.getItem("myProjects")),n()):(t=[],function(){const e=document.querySelector(".projectContainer"),t=document.createElement("div");t.textContent="Default",e.appendChild(t),document.querySelector(".contentHeader").textContent=t.textContent,document.getElementById("taskButton").style.visibility="visibile";let o=t.textContent,r=new Project(o);myProjects.push(r),projectClick(),console.log(myProjects)}());class o{constructor(e,t,o){this.title=e,this.index=t,this.tasks=[]}}class r{constructor(e,t,o,r){this.title=e,this.description=t,this.priority=o,this.dueDate=r}}function n(){const o=document.querySelector(".projectContainer");let i=document.querySelector(".contentHeader");const a=document.querySelector(".taskContainer");o.innerHTML="",o.textContent="Projects",t.forEach(((c,s)=>{const d=document.createElement("div");d.classList.add("project"),o.appendChild(d);const u=document.createElement("div");u.classList.add("projectTitle"),u.textContent=c.title,d.appendChild(u);let y=document.createElement("button");y.setAttribute("id","deleteProject"),y.textContent="X",d.appendChild(y),y.addEventListener("click",(()=>{t.splice(s,1),d.remove(),n(),i.textContent==c.title&&e(t),localStorage.setItem("myProjects",JSON.stringify(t)),console.log(t)})),u.addEventListener("click",(()=>{a.innerHTML="",i.textContent=c.title,l(s),function(e){const o=document.querySelector(".taskFormContainer");o.innerHTML="",document.querySelector(".taskContainer");const n=document.createElement("input");n.setAttribute("id","taskTitle"),n.placeholder="title",o.appendChild(n);const i=document.createElement("input");i.setAttribute("id","taskDescription"),i.placeholder="description",o.appendChild(i);const a=document.createElement("select");a.setAttribute("id","taskPriority"),o.appendChild(a);const c=document.createElement("option");c.value="No Priority",c.textContent="No Priority",a.appendChild(c);const s=document.createElement("option");s.value="High Priority",s.textContent="High Priority",a.appendChild(s);const d=document.createElement("option");d.value="Low Priority",d.textContent="Low Priority",a.appendChild(d);const u=document.createElement("input");u.setAttribute("id","taskDueDate"),u.type="Date",u.textContent="Due Date",o.appendChild(u);const y=document.createElement("button");y.setAttribute("id","submitTask"),y.textContent="Submit",o.appendChild(y);const m=document.createElement("button");m.setAttribute("id","cancelTask"),m.textContent="Cancel",o.appendChild(m),y.addEventListener("click",(()=>{let o=document.getElementById("taskTitle").value,n=document.getElementById("taskDescription").value,i=document.getElementById("taskPriority").value,a=document.getElementById("taskDueDate").value,c=new r(o,n,i,a);t.at(e).tasks.push(c),localStorage.setItem("myProjects",JSON.stringify(t)),console.log(localStorage),console.log(t),console.log(i),l(e),document.querySelector(".taskFormContainer").style.visibility="hidden"})),m.addEventListener("click",(()=>{o.style.visibility="hidden"}))}(s),function(){const e=document.getElementById("taskButton");e.style.visibility="visible";const t=document.querySelector(".taskFormContainer");e.addEventListener("click",(()=>{t.style.visibility="visible",document.getElementById("taskTitle").value="",document.getElementById("taskDescription").value="",document.getElementById("taskPriority").value="",document.getElementById("taskDueDate").value=""}))}(),console.log(t),console.log(s)}))}))}function l(e){const o=document.querySelector(".taskContainer");o.innerHTML="";let r=t.at(e).tasks;r.forEach(((e,n)=>{let l=document.createElement("div");l.classList.add("task"),o.appendChild(l);let i=document.createElement("input");i.classList.add("taskTitle"),i.value=e.title,l.appendChild(i);let a=document.createElement("input");a.classList.add("taskDescription"),a.value=e.description,l.appendChild(a);let c=document.createElement("select");c.classList.add("taskPriority"),l.appendChild(c),c.addEventListener("change",(o=>{"No Priority"==o.currentTarget.value?(o.currentTarget.value=s.value,e.priority=o.currentTarget.value,l.style.borderColor="black",console.log(t),s.blur(),localStorage.setItem("myProjects",JSON.stringify(t))):"Low Priority"==o.currentTarget.value?(o.currentTarget.value=d.value,e.priority=o.currentTarget.value,l.style.borderColor="green",console.log(t),d.blur(),localStorage.setItem("myProjects",JSON.stringify(t))):"High Priority"==o.currentTarget.value&&(o.currentTarget.value=u.value,e.priority=o.currentTarget.value,l.style.borderColor="red",console.log(t),u.blur(),localStorage.setItem("myProjects",JSON.stringify(t)))}));let s=document.createElement("option");s.classList.add("noPriority"),s.value="No Priority",s.textContent="No Priority",c.appendChild(s);let d=document.createElement("option");d.classList.add("lowPriority"),d.value="Low Priority",d.textContent="Low Priority",c.appendChild(d);let u=document.createElement("option");u.classList.add("highPriority"),u.value="High Priority",u.textContent="High Priority",c.appendChild(u);let y=document.createElement("input");y.classList.add("showDueDate"),y.type="Date",y.value=e.dueDate,l.appendChild(y),y.addEventListener("change",(o=>{o.currentTarget.value=y.value,e.dueDate=o.currentTarget.value,console.log(e),localStorage.setItem("myProjects",JSON.stringify(t))})),i.addEventListener("keypress",(o=>{"Enter"==o.key&&(e.title=i.value,e.description=a.value,e.priority=c.value,e.dueDate=y.value,console.log(t),i.blur(),localStorage.setItem("myProjects",JSON.stringify(t)))})),a.addEventListener("keypress",(o=>{"Enter"==o.key&&(e.title=i.value,e.description=a.value,e.priority=c.value,e.dueDate=y.value,console.log(t),a.blur(),localStorage.setItem("myProjects",JSON.stringify(t)))})),"High Priority"==e.priority?(l.style.borderColor="red",u.selected=!0):"Low Priority"==e.priority?(l.style.borderColor="green",d.selected=!0):l.style.borderColor="black";let m=document.createElement("button");m.classList.add("taskDelete"),m.textContent="X",l.appendChild(m),m.addEventListener("click",(()=>{r.splice(n,1),l.remove(),console.log(n),console.log(e),console.log(r),localStorage.setItem("myProjects",JSON.stringify(t))}))}))}!function(){const e=document.querySelector(".projectFormContainer"),t=document.querySelector(".projectButton"),o=document.getElementById("projectName");t.addEventListener("click",(()=>{o.value="",e.style.visibility="visible"}))}(),function(){const e=document.getElementById("submitProject"),r=document.querySelector(".projectContainer");e.addEventListener("click",(()=>{r.innerHTML="",r.textContent="Projects";let e=document.getElementById("projectName").value,l=new o(e);t.push(l),console.log(t),n(),document.querySelector(".projectFormContainer").style.visibility="hidden",localStorage.setItem("myProjects",JSON.stringify(t))}))}(),function(){const e=document.getElementById("cancelProject"),t=document.querySelector(".projectFormContainer");e.addEventListener("click",(()=>{t.style.visibility="hidden"}))}(),document.querySelector(".allTasks").addEventListener("click",(()=>{e(t)})),window.addEventListener("DOMContentLoaded",(()=>{e(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,