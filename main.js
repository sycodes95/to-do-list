(()=>{let e=[];class t{constructor(e,t,n){this.title=e,this.index=t,this.tasks=[]}}class n{constructor(e,t,n,o){this.title=e,this.description=t,this.priority=n,this.dueDate=o}}function o(){const t=document.querySelector(".projectContainer");let r=document.querySelector(".contentHeader");const d=document.querySelector(".taskContainer");t.innerHTML="",t.textContent="Projects",e.forEach(((c,s)=>{const a=document.createElement("div");a.classList.add("project"),t.appendChild(a);const u=document.createElement("div");u.classList.add("projectTitle"),u.textContent=c.title,a.appendChild(u);let p=document.createElement("button");p.setAttribute("id","deleteProject"),p.textContent="X",a.appendChild(p),p.addEventListener("click",(()=>{e.splice(s,1),a.remove(),o(),r.textContent==c.title&&l(),console.log(e)})),u.addEventListener("click",(()=>{d.innerHTML="",r.textContent=c.title,i(s),function(t){const o=document.querySelector(".taskFormContainer");o.innerHTML="",document.querySelector(".taskContainer");const l=document.createElement("input");l.setAttribute("id","taskTitle"),l.placeholder="title",o.appendChild(l);const r=document.createElement("input");r.setAttribute("id","taskDescription"),r.placeholder="description",o.appendChild(r);const d=document.createElement("select");d.setAttribute("id","taskPriority"),o.appendChild(d);const c=document.createElement("option");c.value="High Priority",c.textContent="High Priority",d.appendChild(c);const s=document.createElement("option");s.value="Low Priority",s.textContent="Low Priority",d.appendChild(s);const a=document.createElement("input");a.setAttribute("id","taskDueDate"),a.type="Date",a.textContent="Due Date",o.appendChild(a);const u=document.createElement("button");u.setAttribute("id","submitTask"),u.textContent="Submit",o.appendChild(u);const p=document.createElement("button");p.setAttribute("id","cancelTask"),p.textContent="Cancel",o.appendChild(p),u.addEventListener("click",(()=>{let o=document.getElementById("taskTitle").value,l=document.getElementById("taskDescription").value,r=document.getElementById("taskPriority").value,d=document.getElementById("taskDueDate").value,c=new n(o,l,r,d);e.at(t).tasks.push(c),console.log(e),console.log(r),i(t),document.querySelector(".taskFormContainer").style.visibility="hidden"})),p.addEventListener("click",(()=>{o.style.visibility="hidden"}))}(s),function(){const e=document.getElementById("taskButton");e.style.visibility="visible";const t=document.querySelector(".taskFormContainer");e.addEventListener("click",(()=>{t.style.visibility="visible",document.getElementById("taskTitle").value="",document.getElementById("taskDescription").value="",document.getElementById("taskPriority").value="",document.getElementById("taskDueDate").value=""}))}(),console.log(e),console.log(s)}))}))}function i(t){const n=document.querySelector(".taskContainer");n.innerHTML="";let o=e.at(t).tasks;o.forEach(((t,i)=>{let l=document.createElement("div");l.classList.add("task"),n.appendChild(l);let r=document.createElement("input");r.classList.add("taskTitle"),r.value=t.title,l.appendChild(r);let d=document.createElement("input");d.classList.add("taskDescription"),d.value=t.description,l.appendChild(d);let c=document.createElement("select");c.classList.add("taskPriority"),c.textContent=t.priority,l.appendChild(c);let s=document.createElement("option");s.classList.add("lowPriority"),s.value="Low Priority",s.textContent="Low Priority",c.appendChild(s);let a=document.createElement("option");a.classList.add("highPriority"),a.value="High Priority",a.textContent="High Priority",c.appendChild(a);let u=document.createElement("input");u.classList.add("showDueDate"),u.type="Date",u.value=t.dueDate,l.appendChild(u);let p=document.createElement("button");p.classList.add("taskEditAndSubmit"),p.textContent="Submit",l.appendChild(p),r.addEventListener("keypress",(n=>{"Enter"==n.key&&(t.title=r.value,t.description=d.value,t.priority=c.value,t.dueDate=u.value,console.log(e),r.blur())})),d.addEventListener("keypress",(n=>{"Enter"==n.key&&(t.title=r.value,t.description=d.value,t.priority=c.value,t.dueDate=u.value,console.log(e),d.blur())})),p.addEventListener("click",(()=>{t.title=r.value,t.description=d.value,t.priority=c.value,t.dueDate=u.value,"High Priority"==t.priority?(l.style.borderColor="red",a.selected=!0):"Low Priority"==t.priority?(l.style.borderColor="green",s.selected=!0):l.style.borderColor="black",console.log(o)})),"High Priority"==t.priority?(l.style.borderColor="red",a.selected=!0):"Low Priority"==t.priority?(l.style.borderColor="green",s.selected=!0):l.style.borderColor="black";let m=document.createElement("button");m.classList.add("taskDelete"),m.textContent="Delete",l.appendChild(m),m.addEventListener("click",(()=>{o.splice(i,1),l.remove(),console.log(i),console.log(t),console.log(o)}))}))}function l(){document.getElementById("taskButton").style.visibility="hidden",document.querySelector(".taskFormContainer").style.visibility="hidden",document.querySelector(".contentHeader").textContent="All";const t=document.querySelector(".taskContainer");t.innerHTML="",e.forEach(((n,o)=>{let i=n.tasks;i.forEach(((n,o)=>{console.log(n);let l=document.createElement("div");l.classList.add("task"),t.appendChild(l);let r=document.createElement("input");r.classList.add("taskTitle"),r.value=n.title,l.appendChild(r);let d=document.createElement("input");d.classList.add("taskDescription"),d.value=n.description,l.appendChild(d);let c=document.createElement("select");c.classList.add("taskPriority"),c.textContent=n.priority,l.appendChild(c);let s=document.createElement("option");s.classList.add("lowPriority"),s.value="Low Priority",s.textContent="Low Priority",c.appendChild(s);let a=document.createElement("option");a.classList.add("highPriority"),a.value="High Priority",a.textContent="High Priority",c.appendChild(a);let u=document.createElement("input");u.classList.add("showDueDate"),u.type="Date",u.value=n.dueDate,l.appendChild(u);let p=document.createElement("button");p.classList.add("taskEditAndSubmit"),p.textContent="Submit",l.appendChild(p),r.addEventListener("keypress",(t=>{"Enter"==t.key&&(n.title=r.value,n.description=d.value,n.priority=c.value,n.dueDate=u.value,console.log(e),r.blur())})),d.addEventListener("keypress",(t=>{"Enter"==t.key&&(n.title=r.value,n.description=d.value,n.priority=c.value,n.dueDate=u.value,console.log(e),d.blur())})),p.addEventListener("click",(()=>{n.title=r.value,n.description=d.value,n.priority=c.value,n.dueDate=u.value,"High Priority"==n.priority?(l.style.borderColor="red",a.selected=!0):"Low Priority"==n.priority?(l.style.borderColor="green",s.selected=!0):l.style.borderColor="black",console.log(i)})),"High Priority"==n.priority?(l.style.borderColor="red",a.selected=!0):"Low Priority"==n.priority?(l.style.borderColor="green",s.selected=!0):l.style.borderColor="black";let m=document.createElement("button");m.classList.add("taskDelete"),m.textContent="Delete",l.appendChild(m),m.addEventListener("click",(()=>{i.splice(o,1),l.remove(),console.log(o),console.log(n),console.log(i)}))}))}))}!function(){const n=document.querySelector(".projectContainer"),i=document.createElement("div");i.textContent="Default",n.appendChild(i),document.querySelector(".contentHeader").textContent=i.textContent,document.getElementById("taskButton").style.visibility="visibile";let l=i.textContent,r=new t(l);e.push(r),o(),console.log(e)}(),function(){const e=document.querySelector(".projectFormContainer"),t=document.querySelector(".projectButton"),n=document.getElementById("projectName");t.addEventListener("click",(()=>{n.value="",e.style.visibility="visible"}))}(),function(){const n=document.getElementById("submitProject"),i=document.querySelector(".projectContainer");n.addEventListener("click",(()=>{i.innerHTML="",i.textContent="Projects";let n=document.getElementById("projectName").value,l=new t(n);e.push(l),console.log(e),o(),document.querySelector(".projectFormContainer").style.visibility="hidden"}))}(),function(){const e=document.getElementById("cancelProject"),t=document.querySelector(".projectFormContainer");e.addEventListener("click",(()=>{t.style.visibility="hidden"}))}(),document.querySelector(".allTasks").addEventListener("click",(()=>{l()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFDdkN5RCxFQUFjMUQsU0FBU29DLGVBQWUsZUFFNUNxQixFQUFjeEMsaUJBQWlCLFNBQVMsS0FDcEN5QyxFQUFZNUIsTUFBUSxHQUNwQjBCLEVBQXFCaEIsTUFBTUMsV0FBYSxTQUFTLEdBR3hELENBVkQsR0FZQSxXQUNJLE1BQU1rQixFQUFTM0QsU0FBU29DLGVBQWUsaUJBQ2pDckMsRUFBbUJDLFNBQVNDLGNBQWMscUJBRWhEMEQsRUFBTzFDLGlCQUFpQixTQUFTLEtBQzdCbEIsRUFBaUJLLFVBQVksR0FDN0JMLEVBQWlCTSxZQUFjLFdBUS9CLElBQUlmLEVBUGdCVSxTQUFTb0MsZUFBZSxlQU9wQk4sTUFFcEI4QixFQUFhLElBQUl4RSxFQUFRRSxHQUM3QkgsRUFBV29ELEtBQUtxQixHQUNoQnZDLFFBQVFDLElBQUluQyxHQUlaVyxJQUU2QkUsU0FBU0MsY0FBYyx5QkFDL0J1QyxNQUFNQyxXQUFhLFFBQVEsR0FJdkQsQ0E3QkQsR0ErQkEsV0FDSSxNQUFNb0IsRUFBZ0I3RCxTQUFTb0MsZUFBZSxpQkFDeENvQixFQUF1QnhELFNBQVNDLGNBQWMseUJBQ3BENEQsRUFBYzVDLGlCQUFpQixTQUFTLEtBQ3BDdUMsRUFBcUJoQixNQUFNQyxXQUFhLFFBQVEsR0FHdkQsQ0FQRCxHQWtmQXpDLFNBQVNDLGNBQWMsYUFBYWdCLGlCQUFpQixTQUFTLEtBQzFERyxHQUFTLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBteVByb2plY3RzID0gW107XG5cblxuY2xhc3MgUHJvamVjdCB7XG4gICAgY29uc3RydWN0b3IodGl0bGUsIGluZGV4LCB0YXNrcyl7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZVxuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXhcbiAgICAgICAgdGhpcy50YXNrcyA9IFtdXG4gICAgfVxuXG59XG5cbmNsYXNzIFRhc2sge1xuICAgIGNvbnN0cnVjdG9yKHRpdGxlLCBkZXNjcmlwdGlvbiwgcHJpb3JpdHksIGR1ZURhdGUpe1xuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgICAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xuICAgIH1cbn1cblxuKGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRQcm9qZWN0ICgpeyBcbiAgICBjb25zdCBwcm9qZWN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RDb250YWluZXInKTtcbiAgICBcbiAgICBjb25zdCBhZGRQcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYWRkUHJvamVjdC50ZXh0Q29udGVudCA9ICdEZWZhdWx0J1xuICAgIHByb2plY3RDb250YWluZXIuYXBwZW5kQ2hpbGQoYWRkUHJvamVjdCk7XG5cbiAgICBcblxuICAgIGNvbnN0IGNvbnRlbnRIZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudEhlYWRlcicpO1xuICAgIGNvbnRlbnRIZWFkZXIudGV4dENvbnRlbnQgPSBhZGRQcm9qZWN0LnRleHRDb250ZW50O1xuXG4gICAgY29uc3QgdGFza0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrQnV0dG9uJyk7XG4gICAgdGFza0J1dHRvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2liaWxlJztcblxuXG5cbiAgICBsZXQgdGl0bGUgPSBhZGRQcm9qZWN0LnRleHRDb250ZW50O1xuICAgIGxldCBkZWZhdWx0UHJvamVjdCA9IG5ldyBQcm9qZWN0KHRpdGxlKTtcbiAgICBteVByb2plY3RzLnB1c2goZGVmYXVsdFByb2plY3QpO1xuXG4gICAgcHJvamVjdENsaWNrKClcblxuICAgIGNvbnNvbGUubG9nKG15UHJvamVjdHMpXG59KSgpO1xuXG4oZnVuY3Rpb24gcHJvamVjdEJ1dHRvbiAoKXtcbiAgICBjb25zdCBwcm9qZWN0Rm9ybUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0Rm9ybUNvbnRhaW5lcicpO1xuICAgIGNvbnN0IHByb2plY3RCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdEJ1dHRvbicpO1xuICAgIGNvbnN0IHByb2plY3ROYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3ROYW1lJyk7XG4gICAgXG4gICAgcHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICAgIHByb2plY3ROYW1lLnZhbHVlID0gJyc7XG4gICAgICAgIHByb2plY3RGb3JtQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIFxuICAgIH0pO1xufSkoKTtcblxuKGZ1bmN0aW9uIHByb2plY3RTdWJtaXQgKCl7XG4gICAgY29uc3Qgc3VibWl0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1Ym1pdFByb2plY3QnKTtcbiAgICBjb25zdCBwcm9qZWN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RDb250YWluZXInKTtcbiAgICBcbiAgICBzdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICBwcm9qZWN0Q29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBwcm9qZWN0Q29udGFpbmVyLnRleHRDb250ZW50ID0gJ1Byb2plY3RzJ1xuICAgICAgICBjb25zdCBwcm9qZWN0TmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0TmFtZScpO1xuICAgICAgICBcblxuICAgICAgICBcblxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGxldCB0aXRsZSA9IHByb2plY3ROYW1lLnZhbHVlO1xuXG4gICAgICAgIGxldCBwcm9qZWN0T2JqID0gbmV3IFByb2plY3QodGl0bGUpXG4gICAgICAgIG15UHJvamVjdHMucHVzaChwcm9qZWN0T2JqKVxuICAgICAgICBjb25zb2xlLmxvZyhteVByb2plY3RzKVxuXG4gICAgICAgIFxuXG4gICAgICAgIHByb2plY3RDbGljaygpXG5cbiAgICAgICAgY29uc3QgcHJvamVjdEZvcm1Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdEZvcm1Db250YWluZXInKTtcbiAgICAgICAgcHJvamVjdEZvcm1Db250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gcHJvamVjdENhbmNlbCAoKXtcbiAgICBjb25zdCBjYW5jZWxQcm9qZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbmNlbFByb2plY3QnKTtcbiAgICBjb25zdCBwcm9qZWN0Rm9ybUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0Rm9ybUNvbnRhaW5lcicpXG4gICAgY2FuY2VsUHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICAgIHByb2plY3RGb3JtQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblxuICAgIH0pO1xufSkoKTtcblxuZnVuY3Rpb24gdGFza0J1dHRvbiAoKXtcblxuICAgIFxuXG4gICAgY29uc3QgdGFza0J1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrQnV0dG9uJyk7XG4gICAgdGFza0J1dHRvbi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnXG4gICAgY29uc3QgdGFza0Zvcm1Db250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza0Zvcm1Db250YWluZXInKTtcbiAgICBcbiAgICB0YXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PiB7XG4gICAgICAgIHRhc2tGb3JtQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSdcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza1RpdGxlJykudmFsdWUgPSAnJztcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tEZXNjcmlwdGlvbicpLnZhbHVlID0gJyc7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrUHJpb3JpdHknKS52YWx1ZSA9ICcnO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza0R1ZURhdGUnKS52YWx1ZSA9ICcnO1xuXG4gICAgfSlcblxufVxuXG4gICAgICAgIFxuZnVuY3Rpb24gcHJvamVjdENsaWNrICgpe1xuICAgIGNvbnN0IHByb2plY3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdENvbnRhaW5lcicpO1xuICAgIGxldCBjb250ZW50SGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnRIZWFkZXInKTtcbiAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2tDb250YWluZXInKVxuXG4gICAgcHJvamVjdENvbnRhaW5lci5pbm5lckhUTUwgPSAnJ1xuICAgIHByb2plY3RDb250YWluZXIudGV4dENvbnRlbnQgPSAnUHJvamVjdHMnXG5cbiAgICBteVByb2plY3RzLmZvckVhY2goKHByb2osIGkpID0+e1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHByb2plY3QuY2xhc3NMaXN0LmFkZCgncHJvamVjdCcpXG4gICAgICAgIFxuICAgICAgICBwcm9qZWN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHByb2plY3QpO1xuXG4gICAgICAgIGNvbnN0IHByb2plY3RUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBwcm9qZWN0VGl0bGUuY2xhc3NMaXN0LmFkZCgncHJvamVjdFRpdGxlJylcbiAgICAgICAgcHJvamVjdFRpdGxlLnRleHRDb250ZW50ID0gcHJvai50aXRsZTtcbiAgICAgICAgcHJvamVjdC5hcHBlbmRDaGlsZChwcm9qZWN0VGl0bGUpO1xuXG5cbiAgICAgICAgbGV0IGRlbGV0ZVByb2plY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgICAgICBkZWxldGVQcm9qZWN0LnNldEF0dHJpYnV0ZSgnaWQnLCAnZGVsZXRlUHJvamVjdCcpXG4gICAgICAgIGRlbGV0ZVByb2plY3QudGV4dENvbnRlbnQgPSAnWCc7XG4gICAgICAgIHByb2plY3QuYXBwZW5kQ2hpbGQoZGVsZXRlUHJvamVjdClcbiAgICAgICAgZGVsZXRlUHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBteVByb2plY3RzLnNwbGljZShpLDEpO1xuICAgICAgICAgICAgcHJvamVjdC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHByb2plY3RDbGljaygpXG5cbiAgICAgICAgICAgIGlmIChjb250ZW50SGVhZGVyLnRleHRDb250ZW50ID09IHByb2oudGl0bGUpe1xuICAgICAgICAgICAgICAgIGFsbFRhc2tzKClcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgY29uc29sZS5sb2cobXlQcm9qZWN0cyk7XG5cbiAgICAgICAgfSlcblxuICAgICAgICBwcm9qZWN0VGl0bGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpPT57XG4gICAgICAgICAgICB0YXNrQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgY29udGVudEhlYWRlci50ZXh0Q29udGVudCA9IHByb2oudGl0bGU7XG4gICAgICAgICAgICBkaXNwbGF5VGFza3MoaSlcbiAgICAgICAgICAgIGNyZWF0ZVRhc2soaSlcbiAgICAgICAgICAgIHRhc2tCdXR0b24oKVxuICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG15UHJvamVjdHMpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhpKSAgXG4gICAgICAgIH0pXG5cblxuXG4gICAgfSlcbiAgICBcbiAgICBcbiAgICBcbn1cblxuZnVuY3Rpb24gZGlzcGxheVRhc2tzIChpKXtcblxuICAgIFxuICAgIGNvbnN0IHRhc2tDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza0NvbnRhaW5lcicpO1xuICAgIHRhc2tDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cbiAgICBsZXQgdGFza0FycmF5ID0gbXlQcm9qZWN0cy5hdChpKS50YXNrcztcbiAgICBcbiAgICB0YXNrQXJyYXkuZm9yRWFjaCgoZSwgaSkgPT57XG4gICAgICAgIGxldCB0YXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRhc2suY2xhc3NMaXN0LmFkZCgndGFzaycpXG5cbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgdGFza0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0YXNrKVxuXG4gICAgICAgIGxldCB0YXNrVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICB0YXNrVGl0bGUuY2xhc3NMaXN0LmFkZCgndGFza1RpdGxlJyk7XG4gICAgICAgIHRhc2tUaXRsZS52YWx1ZSA9IGUudGl0bGU7XG4gICAgICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza1RpdGxlKTtcblxuICAgICAgICBcblxuICAgICAgICBsZXQgdGFza0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgdGFza0Rlc2NyaXB0aW9uLmNsYXNzTGlzdC5hZGQoJ3Rhc2tEZXNjcmlwdGlvbicpXG4gICAgICAgIHRhc2tEZXNjcmlwdGlvbi52YWx1ZSA9IGUuZGVzY3JpcHRpb247XG4gICAgICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza0Rlc2NyaXB0aW9uKTtcblxuICAgICAgICBsZXQgdGFza1ByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XG4gICAgICAgIHRhc2tQcmlvcml0eS5jbGFzc0xpc3QuYWRkKCd0YXNrUHJpb3JpdHknKVxuICAgICAgICB0YXNrUHJpb3JpdHkudGV4dENvbnRlbnQgPSBlLnByaW9yaXR5O1xuICAgICAgICB0YXNrLmFwcGVuZENoaWxkKHRhc2tQcmlvcml0eSk7XG5cbiAgICAgICAgbGV0IGxvd1ByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgIGxvd1ByaW9yaXR5LmNsYXNzTGlzdC5hZGQoJ2xvd1ByaW9yaXR5Jyk7XG4gICAgICAgIGxvd1ByaW9yaXR5LnZhbHVlID0gJ0xvdyBQcmlvcml0eSc7XG4gICAgICAgIGxvd1ByaW9yaXR5LnRleHRDb250ZW50ID0gJ0xvdyBQcmlvcml0eSdcbiAgICAgICAgdGFza1ByaW9yaXR5LmFwcGVuZENoaWxkKGxvd1ByaW9yaXR5KTtcblxuICAgICAgICBcblxuICAgICAgICBsZXQgaGlnaFByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgIGhpZ2hQcmlvcml0eS5jbGFzc0xpc3QuYWRkKCdoaWdoUHJpb3JpdHknKTtcbiAgICAgICAgaGlnaFByaW9yaXR5LnZhbHVlID0gJ0hpZ2ggUHJpb3JpdHknO1xuICAgICAgICBoaWdoUHJpb3JpdHkudGV4dENvbnRlbnQgPSAnSGlnaCBQcmlvcml0eSdcbiAgICAgICAgdGFza1ByaW9yaXR5LmFwcGVuZENoaWxkKGhpZ2hQcmlvcml0eSk7XG5cbiAgICAgICAgXG5cbiAgICAgICAgbGV0IHRhc2tEdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKVxuICAgICAgICB0YXNrRHVlRGF0ZS5jbGFzc0xpc3QuYWRkKCdzaG93RHVlRGF0ZScpO1xuICAgICAgICB0YXNrRHVlRGF0ZS50eXBlID0gJ0RhdGUnO1xuICAgICAgICB0YXNrRHVlRGF0ZS52YWx1ZSA9IGUuZHVlRGF0ZTtcbiAgICAgICAgdGFzay5hcHBlbmRDaGlsZCh0YXNrRHVlRGF0ZSk7XG5cbiAgICAgICAgbGV0IHRhc2tFZGl0QW5kU3VibWl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIHRhc2tFZGl0QW5kU3VibWl0LmNsYXNzTGlzdC5hZGQoJ3Rhc2tFZGl0QW5kU3VibWl0Jyk7XG4gICAgICAgIHRhc2tFZGl0QW5kU3VibWl0LnRleHRDb250ZW50ID0gJ1N1Ym1pdCc7XG4gICAgICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza0VkaXRBbmRTdWJtaXQpO1xuXG4gICAgICAgIHRhc2tUaXRsZS5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChrKT0+e1xuICAgICAgICAgICAgaWYgKGsua2V5ID09ICdFbnRlcicpe1xuICAgICAgICAgICAgICAgIGUudGl0bGUgPSB0YXNrVGl0bGUudmFsdWU7XG4gICAgICAgICAgICAgICAgZS5kZXNjcmlwdGlvbiA9IHRhc2tEZXNjcmlwdGlvbi52YWx1ZTtcbiAgICAgICAgICAgICAgICBlLnByaW9yaXR5ID0gdGFza1ByaW9yaXR5LnZhbHVlO1xuICAgICAgICAgICAgICAgIGUuZHVlRGF0ZSA9IHRhc2tEdWVEYXRlLnZhbHVlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG15UHJvamVjdHMpO1xuICAgICAgICAgICAgICAgIHRhc2tUaXRsZS5ibHVyKCk7XG5cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRhc2tEZXNjcmlwdGlvbi5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChrKT0+e1xuICAgICAgICAgICAgaWYgKGsua2V5ID09ICdFbnRlcicpe1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGUudGl0bGUgPSB0YXNrVGl0bGUudmFsdWU7XG4gICAgICAgICAgICAgICAgZS5kZXNjcmlwdGlvbiA9IHRhc2tEZXNjcmlwdGlvbi52YWx1ZTtcbiAgICAgICAgICAgICAgICBlLnByaW9yaXR5ID0gdGFza1ByaW9yaXR5LnZhbHVlO1xuICAgICAgICAgICAgICAgIGUuZHVlRGF0ZSA9IHRhc2tEdWVEYXRlLnZhbHVlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG15UHJvamVjdHMpO1xuICAgICAgICAgICAgICAgIHRhc2tEZXNjcmlwdGlvbi5ibHVyKCk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSlcblxuICAgICAgICB0YXNrRWRpdEFuZFN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICBlLnRpdGxlID0gdGFza1RpdGxlLnZhbHVlO1xuICAgICAgICAgICAgZS5kZXNjcmlwdGlvbiA9IHRhc2tEZXNjcmlwdGlvbi52YWx1ZTtcbiAgICAgICAgICAgIGUucHJpb3JpdHkgPSB0YXNrUHJpb3JpdHkudmFsdWU7XG4gICAgICAgICAgICBlLmR1ZURhdGUgPSB0YXNrRHVlRGF0ZS52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKGUucHJpb3JpdHkgPT0gJ0hpZ2ggUHJpb3JpdHknKXtcbiAgICAgICAgICAgICAgICB0YXNrLnN0eWxlLmJvcmRlckNvbG9yID0gJ3JlZCdcbiAgICAgICAgICAgICAgICBoaWdoUHJpb3JpdHkuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlLnByaW9yaXR5ID09ICdMb3cgUHJpb3JpdHknKXtcbiAgICAgICAgICAgICAgICB0YXNrLnN0eWxlLmJvcmRlckNvbG9yID0gJ2dyZWVuJ1xuICAgICAgICAgICAgICAgIGxvd1ByaW9yaXR5LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFzay5zdHlsZS5ib3JkZXJDb2xvciA9ICdibGFjaydcbiAgICAgICAgICAgIH1cbiAgICBcblxuICAgICAgICAgICAgY29uc29sZS5sb2codGFza0FycmF5KVxuXG5cbiAgICAgICAgfSlcbiAgICAgICAgXG5cbiAgICAgICAgaWYgKGUucHJpb3JpdHkgPT0gJ0hpZ2ggUHJpb3JpdHknKXtcbiAgICAgICAgICAgIHRhc2suc3R5bGUuYm9yZGVyQ29sb3IgPSAncmVkJ1xuICAgICAgICAgICAgaGlnaFByaW9yaXR5LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChlLnByaW9yaXR5ID09ICdMb3cgUHJpb3JpdHknKXtcbiAgICAgICAgICAgIHRhc2suc3R5bGUuYm9yZGVyQ29sb3IgPSAnZ3JlZW4nXG4gICAgICAgICAgICBsb3dQcmlvcml0eS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXNrLnN0eWxlLmJvcmRlckNvbG9yID0gJ2JsYWNrJ1xuICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG5cblxuXG4gICAgICAgIGxldCB0YXNrRGVsZXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICAgICAgdGFza0RlbGV0ZS5jbGFzc0xpc3QuYWRkKCd0YXNrRGVsZXRlJyk7XG4gICAgICAgIHRhc2tEZWxldGUudGV4dENvbnRlbnQgPSAnRGVsZXRlJztcbiAgICAgICAgdGFzay5hcHBlbmRDaGlsZCh0YXNrRGVsZXRlKTtcbiAgICAgICAgdGFza0RlbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRhc2tBcnJheS5zcGxpY2UoaSAsIDEpO1xuICAgICAgICAgICAgdGFzay5yZW1vdmUoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGkpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRhc2tBcnJheSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG5cbiAgICAgICAgfSlcblxuXG5cblxuICAgIH0pXG5cbn1cblxuXG5cblxuZnVuY3Rpb24gY3JlYXRlVGFzayAoaSl7XG5cbiAgICBjb25zdCB0YXNrRm9ybUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrRm9ybUNvbnRhaW5lcicpO1xuICAgIHRhc2tGb3JtQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuXG4gICAgY29uc3QgdGFza0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrQ29udGFpbmVyJylcblxuICAgIFxuXG4gICAgXG5cbiAgICBjb25zdCB0YXNrVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIHRhc2tUaXRsZS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3Rhc2tUaXRsZScpXG4gICAgdGFza1RpdGxlLnBsYWNlaG9sZGVyID0gJ3RpdGxlJztcbiAgICB0YXNrRm9ybUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0YXNrVGl0bGUpO1xuXG4gICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICB0YXNrRGVzY3JpcHRpb24uc2V0QXR0cmlidXRlKCdpZCcsICd0YXNrRGVzY3JpcHRpb24nKTtcbiAgICB0YXNrRGVzY3JpcHRpb24ucGxhY2Vob2xkZXIgPSAnZGVzY3JpcHRpb24nXG4gICAgdGFza0Zvcm1Db250YWluZXIuYXBwZW5kQ2hpbGQodGFza0Rlc2NyaXB0aW9uKTtcblxuICAgIGNvbnN0IHRhc2tQcmlvcml0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICAgIHRhc2tQcmlvcml0eS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3Rhc2tQcmlvcml0eScpO1xuICAgIHRhc2tGb3JtQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhc2tQcmlvcml0eSk7XG5cbiAgICBjb25zdCBoaWdoUHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBoaWdoUHJpb3JpdHkudmFsdWUgPSAnSGlnaCBQcmlvcml0eSdcbiAgICBoaWdoUHJpb3JpdHkudGV4dENvbnRlbnQgPSAnSGlnaCBQcmlvcml0eSdcbiAgICB0YXNrUHJpb3JpdHkuYXBwZW5kQ2hpbGQoaGlnaFByaW9yaXR5KTtcblxuICAgIGNvbnN0IGxvd1ByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgbG93UHJpb3JpdHkudmFsdWUgPSAnTG93IFByaW9yaXR5J1xuICAgIGxvd1ByaW9yaXR5LnRleHRDb250ZW50ID0gJ0xvdyBQcmlvcml0eSdcbiAgICB0YXNrUHJpb3JpdHkuYXBwZW5kQ2hpbGQobG93UHJpb3JpdHkpO1xuXG4gICAgY29uc3QgdGFza0R1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIHRhc2tEdWVEYXRlLnNldEF0dHJpYnV0ZSgnaWQnLCAndGFza0R1ZURhdGUnKVxuICAgIHRhc2tEdWVEYXRlLnR5cGUgPSAnRGF0ZSc7XG4gICAgdGFza0R1ZURhdGUudGV4dENvbnRlbnQgPSAnRHVlIERhdGUnO1xuICAgIHRhc2tGb3JtQ29udGFpbmVyLmFwcGVuZENoaWxkKHRhc2tEdWVEYXRlKTtcblxuICAgIGNvbnN0IHN1Ym1pdFRhc2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBzdWJtaXRUYXNrLnNldEF0dHJpYnV0ZSgnaWQnLCAnc3VibWl0VGFzaycpO1xuICAgIHN1Ym1pdFRhc2sudGV4dENvbnRlbnQgPSAnU3VibWl0J1xuICAgIHRhc2tGb3JtQ29udGFpbmVyLmFwcGVuZENoaWxkKHN1Ym1pdFRhc2spO1xuXG4gICAgY29uc3QgY2FuY2VsVGFzayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGNhbmNlbFRhc2suc2V0QXR0cmlidXRlKCdpZCcsICdjYW5jZWxUYXNrJyk7XG4gICAgY2FuY2VsVGFzay50ZXh0Q29udGVudCA9ICdDYW5jZWwnXG4gICAgdGFza0Zvcm1Db250YWluZXIuYXBwZW5kQ2hpbGQoY2FuY2VsVGFzayk7XG5cbiAgICBcblxuICAgIHN1Ym1pdFRhc2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgICAgICBcblxuICAgICAgICBcblxuICAgICAgICBsZXQgdGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza1RpdGxlJykudmFsdWU7XG4gICAgICAgIGxldCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrRGVzY3JpcHRpb24nKS52YWx1ZTtcbiAgICAgICAgbGV0IHByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tQcmlvcml0eScpLnZhbHVlO1xuICAgICAgICBsZXQgZHVlRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrRHVlRGF0ZScpLnZhbHVlO1xuXG4gICAgICAgIFxuXG4gICAgICAgIGxldCB0YXNrT2JqID0gbmV3IFRhc2sgKHRpdGxlLCBkZXNjcmlwdGlvbiwgcHJpb3JpdHksIGR1ZURhdGUpXG4gICAgICAgIG15UHJvamVjdHMuYXQoaSkudGFza3MucHVzaCh0YXNrT2JqKTtcblxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKG15UHJvamVjdHMpXG4gICAgICAgIGNvbnNvbGUubG9nKHByaW9yaXR5KVxuXG4gICAgICAgIGRpc3BsYXlUYXNrcyhpKVxuXG4gICAgICAgIFxuXG4gICAgICAgIGxldCB0YXNrRm9ybUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrRm9ybUNvbnRhaW5lcicpO1xuICAgICAgICB0YXNrRm9ybUNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgIFxuICAgICAgICBcblxuICAgIH0pXG5cbiAgICBjYW5jZWxUYXNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgdGFza0Zvcm1Db250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuXG4gICAgfSlcblxuICAgICAgICBcblxufVxuXG5mdW5jdGlvbiBhbGxUYXNrcyAoKXtcbiAgICBjb25zdCB0YXNrQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tCdXR0b24nKVxuICAgIHRhc2tCdXR0b24uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGNvbnN0IHRhc2tGb3JtQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhc2tGb3JtQ29udGFpbmVyJyk7XG4gICAgdGFza0Zvcm1Db250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50SGVhZGVyJykudGV4dENvbnRlbnQgPSAnQWxsJ1xuICAgIGNvbnN0IHRhc2tDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGFza0NvbnRhaW5lcicpO1xuICAgIHRhc2tDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG4gICAgbXlQcm9qZWN0cy5mb3JFYWNoKChlLGkpPT57XG4gICAgICAgIGxldCB0YXNrQXJyYXkgPSBlLnRhc2tzXG4gICAgICAgIHRhc2tBcnJheS5mb3JFYWNoKChlLGkpPT57XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKVxuXG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBsZXQgdGFzayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdGFzay5jbGFzc0xpc3QuYWRkKCd0YXNrJylcbiAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRhc2tDb250YWluZXIuYXBwZW5kQ2hpbGQodGFzaylcbiAgICBcbiAgICAgICAgICAgIGxldCB0YXNrVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgdGFza1RpdGxlLmNsYXNzTGlzdC5hZGQoJ3Rhc2tUaXRsZScpO1xuICAgICAgICAgICAgdGFza1RpdGxlLnZhbHVlID0gZS50aXRsZTtcbiAgICAgICAgICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza1RpdGxlKTtcbiAgICBcbiAgICAgICAgICAgIGxldCB0YXNrRGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgdGFza0Rlc2NyaXB0aW9uLmNsYXNzTGlzdC5hZGQoJ3Rhc2tEZXNjcmlwdGlvbicpXG4gICAgICAgICAgICB0YXNrRGVzY3JpcHRpb24udmFsdWUgPSBlLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgdGFzay5hcHBlbmRDaGlsZCh0YXNrRGVzY3JpcHRpb24pO1xuICAgIFxuICAgICAgICAgICAgbGV0IHRhc2tQcmlvcml0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICAgICAgICAgICAgdGFza1ByaW9yaXR5LmNsYXNzTGlzdC5hZGQoJ3Rhc2tQcmlvcml0eScpXG4gICAgICAgICAgICB0YXNrUHJpb3JpdHkudGV4dENvbnRlbnQgPSBlLnByaW9yaXR5O1xuICAgICAgICAgICAgdGFzay5hcHBlbmRDaGlsZCh0YXNrUHJpb3JpdHkpO1xuICAgIFxuICAgICAgICAgICAgbGV0IGxvd1ByaW9yaXR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgICBsb3dQcmlvcml0eS5jbGFzc0xpc3QuYWRkKCdsb3dQcmlvcml0eScpO1xuICAgICAgICAgICAgbG93UHJpb3JpdHkudmFsdWUgPSAnTG93IFByaW9yaXR5JztcbiAgICAgICAgICAgIGxvd1ByaW9yaXR5LnRleHRDb250ZW50ID0gJ0xvdyBQcmlvcml0eSdcbiAgICAgICAgICAgIHRhc2tQcmlvcml0eS5hcHBlbmRDaGlsZChsb3dQcmlvcml0eSk7XG4gICAgXG4gICAgICAgICAgICBcbiAgICBcbiAgICAgICAgICAgIGxldCBoaWdoUHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgIGhpZ2hQcmlvcml0eS5jbGFzc0xpc3QuYWRkKCdoaWdoUHJpb3JpdHknKTtcbiAgICAgICAgICAgIGhpZ2hQcmlvcml0eS52YWx1ZSA9ICdIaWdoIFByaW9yaXR5JztcbiAgICAgICAgICAgIGhpZ2hQcmlvcml0eS50ZXh0Q29udGVudCA9ICdIaWdoIFByaW9yaXR5J1xuICAgICAgICAgICAgdGFza1ByaW9yaXR5LmFwcGVuZENoaWxkKGhpZ2hQcmlvcml0eSk7XG4gICAgXG4gICAgICAgICAgICBcbiAgICBcbiAgICAgICAgICAgIGxldCB0YXNrRHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JylcbiAgICAgICAgICAgIHRhc2tEdWVEYXRlLmNsYXNzTGlzdC5hZGQoJ3Nob3dEdWVEYXRlJyk7XG4gICAgICAgICAgICB0YXNrRHVlRGF0ZS50eXBlID0gJ0RhdGUnO1xuICAgICAgICAgICAgdGFza0R1ZURhdGUudmFsdWUgPSBlLmR1ZURhdGU7XG4gICAgICAgICAgICB0YXNrLmFwcGVuZENoaWxkKHRhc2tEdWVEYXRlKTtcbiAgICBcbiAgICAgICAgICAgIGxldCB0YXNrRWRpdEFuZFN1Ym1pdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgdGFza0VkaXRBbmRTdWJtaXQuY2xhc3NMaXN0LmFkZCgndGFza0VkaXRBbmRTdWJtaXQnKTtcbiAgICAgICAgICAgIHRhc2tFZGl0QW5kU3VibWl0LnRleHRDb250ZW50ID0gJ1N1Ym1pdCc7XG4gICAgICAgICAgICB0YXNrLmFwcGVuZENoaWxkKHRhc2tFZGl0QW5kU3VibWl0KTtcblxuICAgICAgICAgICAgdGFza1RpdGxlLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgKGspPT57XG4gICAgICAgICAgICAgICAgaWYgKGsua2V5ID09ICdFbnRlcicpe1xuICAgICAgICAgICAgICAgICAgICBlLnRpdGxlID0gdGFza1RpdGxlLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBlLmRlc2NyaXB0aW9uID0gdGFza0Rlc2NyaXB0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBlLnByaW9yaXR5ID0gdGFza1ByaW9yaXR5LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBlLmR1ZURhdGUgPSB0YXNrRHVlRGF0ZS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG15UHJvamVjdHMpO1xuICAgICAgICAgICAgICAgICAgICB0YXNrVGl0bGUuYmx1cigpO1xuICAgIFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgICAgIHRhc2tEZXNjcmlwdGlvbi5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChrKT0+e1xuICAgICAgICAgICAgICAgIGlmIChrLmtleSA9PSAnRW50ZXInKXtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGUudGl0bGUgPSB0YXNrVGl0bGUudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGUuZGVzY3JpcHRpb24gPSB0YXNrRGVzY3JpcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGUucHJpb3JpdHkgPSB0YXNrUHJpb3JpdHkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGUuZHVlRGF0ZSA9IHRhc2tEdWVEYXRlLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXlQcm9qZWN0cyk7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tEZXNjcmlwdGlvbi5ibHVyKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgIH0pXG4gICAgXG4gICAgICAgICAgICB0YXNrRWRpdEFuZFN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICAgICAgZS50aXRsZSA9IHRhc2tUaXRsZS52YWx1ZTtcbiAgICAgICAgICAgICAgICBlLmRlc2NyaXB0aW9uID0gdGFza0Rlc2NyaXB0aW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgIGUucHJpb3JpdHkgPSB0YXNrUHJpb3JpdHkudmFsdWU7XG4gICAgICAgICAgICAgICAgZS5kdWVEYXRlID0gdGFza0R1ZURhdGUudmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKGUucHJpb3JpdHkgPT0gJ0hpZ2ggUHJpb3JpdHknKXtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5zdHlsZS5ib3JkZXJDb2xvciA9ICdyZWQnXG4gICAgICAgICAgICAgICAgICAgIGhpZ2hQcmlvcml0eS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLnByaW9yaXR5ID09ICdMb3cgUHJpb3JpdHknKXtcbiAgICAgICAgICAgICAgICAgICAgdGFzay5zdHlsZS5ib3JkZXJDb2xvciA9ICdncmVlbidcbiAgICAgICAgICAgICAgICAgICAgbG93UHJpb3JpdHkuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2suc3R5bGUuYm9yZGVyQ29sb3IgPSAnYmxhY2snXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0YXNrQXJyYXkpXG4gICAgXG4gICAgXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgXG4gICAgICAgICAgICBpZiAoZS5wcmlvcml0eSA9PSAnSGlnaCBQcmlvcml0eScpe1xuICAgICAgICAgICAgICAgIHRhc2suc3R5bGUuYm9yZGVyQ29sb3IgPSAncmVkJ1xuICAgICAgICAgICAgICAgIGhpZ2hQcmlvcml0eS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUucHJpb3JpdHkgPT0gJ0xvdyBQcmlvcml0eScpe1xuICAgICAgICAgICAgICAgIHRhc2suc3R5bGUuYm9yZGVyQ29sb3IgPSAnZ3JlZW4nXG4gICAgICAgICAgICAgICAgbG93UHJpb3JpdHkuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXNrLnN0eWxlLmJvcmRlckNvbG9yID0gJ2JsYWNrJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICAgICAgbGV0IHRhc2tEZWxldGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgICAgICAgICAgdGFza0RlbGV0ZS5jbGFzc0xpc3QuYWRkKCd0YXNrRGVsZXRlJyk7XG4gICAgICAgICAgICB0YXNrRGVsZXRlLnRleHRDb250ZW50ID0gJ0RlbGV0ZSc7XG4gICAgICAgICAgICB0YXNrLmFwcGVuZENoaWxkKHRhc2tEZWxldGUpO1xuICAgICAgICAgICAgdGFza0RlbGV0ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGFza0FycmF5LnNwbGljZShpICwgMSk7XG4gICAgICAgICAgICAgICAgdGFzay5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRhc2tBcnJheSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICBcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIFxuICAgICAgICB9KVxuICAgIH0pXG5cbn1cblxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFsbFRhc2tzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+e1xuICAgIGFsbFRhc2tzKClcbn0pXG5cbiAgICBcblxuICAgICAgICBcblxuICAgICAgICBcblxuICAgICAgICBcblxuICAgICAgICBcbiAgICAgICAgICAgIFxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgICBcblxuXG5cblxuICAgICAgICBcbiAgICAgICAgXG5cblxuXG4gICAgICAgICAgICBcblxuXG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgXG5cblxuXG5cblxuXG5cblxuXG5cblxuICAgIFxuXG5cblxuIl0sIm5hbWVzIjpbIm15UHJvamVjdHMiLCJQcm9qZWN0IiwiY29uc3RydWN0b3IiLCJ0aXRsZSIsImluZGV4IiwidGFza3MiLCJ0aGlzIiwiVGFzayIsImRlc2NyaXB0aW9uIiwicHJpb3JpdHkiLCJkdWVEYXRlIiwicHJvamVjdENsaWNrIiwicHJvamVjdENvbnRhaW5lciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnRIZWFkZXIiLCJ0YXNrQ29udGFpbmVyIiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJmb3JFYWNoIiwicHJvaiIsImkiLCJwcm9qZWN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImFwcGVuZENoaWxkIiwicHJvamVjdFRpdGxlIiwiZGVsZXRlUHJvamVjdCIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzcGxpY2UiLCJyZW1vdmUiLCJhbGxUYXNrcyIsImNvbnNvbGUiLCJsb2ciLCJkaXNwbGF5VGFza3MiLCJ0YXNrRm9ybUNvbnRhaW5lciIsInRhc2tUaXRsZSIsInBsYWNlaG9sZGVyIiwidGFza0Rlc2NyaXB0aW9uIiwidGFza1ByaW9yaXR5IiwiaGlnaFByaW9yaXR5IiwidmFsdWUiLCJsb3dQcmlvcml0eSIsInRhc2tEdWVEYXRlIiwidHlwZSIsInN1Ym1pdFRhc2siLCJjYW5jZWxUYXNrIiwiZ2V0RWxlbWVudEJ5SWQiLCJ0YXNrT2JqIiwiYXQiLCJwdXNoIiwic3R5bGUiLCJ2aXNpYmlsaXR5IiwiY3JlYXRlVGFzayIsInRhc2tCdXR0b24iLCJ0YXNrQXJyYXkiLCJlIiwidGFzayIsInRhc2tFZGl0QW5kU3VibWl0IiwiayIsImtleSIsImJsdXIiLCJib3JkZXJDb2xvciIsInNlbGVjdGVkIiwidGFza0RlbGV0ZSIsImFkZFByb2plY3QiLCJkZWZhdWx0UHJvamVjdCIsInByb2plY3RGb3JtQ29udGFpbmVyIiwicHJvamVjdEJ1dHRvbiIsInByb2plY3ROYW1lIiwic3VibWl0IiwicHJvamVjdE9iaiIsImNhbmNlbFByb2plY3QiXSwic291cmNlUm9vdCI6IiJ9