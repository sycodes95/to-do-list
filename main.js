(()=>{"use strict";const e=function(e){document.getElementById("taskButton").style.visibility="hidden",document.querySelector(".taskFormContainer").style.visibility="hidden",document.querySelector(".contentHeader").textContent="All";const t=document.querySelector(".taskContainer");t.innerHTML="",e.forEach(((n,o)=>{let i=n.tasks;i.forEach(((n,o)=>{console.log(n);let l=document.createElement("div");l.classList.add("task"),t.appendChild(l);let r=document.createElement("input");r.classList.add("taskTitle"),r.value=n.title,l.appendChild(r);let c=document.createElement("input");c.classList.add("taskDescription"),c.value=n.description,l.appendChild(c);let d=document.createElement("select");d.classList.add("taskPriority"),d.textContent=n.priority,l.appendChild(d);let a=document.createElement("option");a.classList.add("lowPriority"),a.value="Low Priority",a.textContent="Low Priority",d.appendChild(a);let s=document.createElement("option");s.classList.add("highPriority"),s.value="High Priority",s.textContent="High Priority",d.appendChild(s);let u=document.createElement("input");u.classList.add("showDueDate"),u.type="Date",u.value=n.dueDate,l.appendChild(u);let p=document.createElement("button");p.classList.add("taskEditAndSubmit"),p.textContent="Submit",l.appendChild(p),r.addEventListener("keypress",(t=>{"Enter"==t.key&&(n.title=r.value,n.description=c.value,n.priority=d.value,n.dueDate=u.value,console.log(e),r.blur())})),c.addEventListener("keypress",(t=>{"Enter"==t.key&&(n.title=r.value,n.description=c.value,n.priority=d.value,n.dueDate=u.value,console.log(e),c.blur())})),p.addEventListener("click",(()=>{n.title=r.value,n.description=c.value,n.priority=d.value,n.dueDate=u.value,"High Priority"==n.priority?(l.style.borderColor="red",s.selected=!0):"Low Priority"==n.priority?(l.style.borderColor="green",a.selected=!0):l.style.borderColor="black",console.log(i)})),"High Priority"==n.priority?(l.style.borderColor="red",s.selected=!0):"Low Priority"==n.priority?(l.style.borderColor="green",a.selected=!0):l.style.borderColor="black";let m=document.createElement("button");m.classList.add("taskDelete"),m.textContent="Delete",l.appendChild(m),m.addEventListener("click",(()=>{i.splice(o,1),l.remove(),console.log(o),console.log(n),console.log(i)}))}))}))};let t=[];class n{constructor(e,t,n){this.title=e,this.index=t,this.tasks=[]}}class o{constructor(e,t,n,o){this.title=e,this.description=t,this.priority=n,this.dueDate=o}}function i(){const n=document.querySelector(".projectContainer");let r=document.querySelector(".contentHeader");const c=document.querySelector(".taskContainer");n.innerHTML="",n.textContent="Projects",t.forEach(((d,a)=>{const s=document.createElement("div");s.classList.add("project"),n.appendChild(s);const u=document.createElement("div");u.classList.add("projectTitle"),u.textContent=d.title,s.appendChild(u);let p=document.createElement("button");p.setAttribute("id","deleteProject"),p.textContent="X",s.appendChild(p),p.addEventListener("click",(()=>{t.splice(a,1),s.remove(),i(),r.textContent==d.title&&e(t),console.log(t)})),u.addEventListener("click",(()=>{c.innerHTML="",r.textContent=d.title,l(a),function(e){const n=document.querySelector(".taskFormContainer");n.innerHTML="",document.querySelector(".taskContainer");const i=document.createElement("input");i.setAttribute("id","taskTitle"),i.placeholder="title",n.appendChild(i);const r=document.createElement("input");r.setAttribute("id","taskDescription"),r.placeholder="description",n.appendChild(r);const c=document.createElement("select");c.setAttribute("id","taskPriority"),n.appendChild(c);const d=document.createElement("option");d.value="No Priority",d.textContent="No Priority",c.appendChild(d);const a=document.createElement("option");a.value="High Priority",a.textContent="High Priority",c.appendChild(a);const s=document.createElement("option");s.value="Low Priority",s.textContent="Low Priority",c.appendChild(s);const u=document.createElement("input");u.setAttribute("id","taskDueDate"),u.type="Date",u.textContent="Due Date",n.appendChild(u);const p=document.createElement("button");p.setAttribute("id","submitTask"),p.textContent="Submit",n.appendChild(p);const m=document.createElement("button");m.setAttribute("id","cancelTask"),m.textContent="Cancel",n.appendChild(m),p.addEventListener("click",(()=>{let n=document.getElementById("taskTitle").value,i=document.getElementById("taskDescription").value,r=document.getElementById("taskPriority").value,c=document.getElementById("taskDueDate").value,d=new o(n,i,r,c);t.at(e).tasks.push(d),console.log(t),console.log(r),l(e),document.querySelector(".taskFormContainer").style.visibility="hidden"})),m.addEventListener("click",(()=>{n.style.visibility="hidden"}))}(a),function(){const e=document.getElementById("taskButton");e.style.visibility="visible";const t=document.querySelector(".taskFormContainer");e.addEventListener("click",(()=>{t.style.visibility="visible",document.getElementById("taskTitle").value="",document.getElementById("taskDescription").value="",document.getElementById("taskPriority").value="",document.getElementById("taskDueDate").value=""}))}(),console.log(t),console.log(a)}))}))}function l(e){const n=document.querySelector(".taskContainer");n.innerHTML="";let o=t.at(e).tasks;o.forEach(((e,i)=>{let l=document.createElement("div");l.classList.add("task"),n.appendChild(l);let r=document.createElement("input");r.classList.add("taskTitle"),r.value=e.title,l.appendChild(r);let c=document.createElement("input");c.classList.add("taskDescription"),c.value=e.description,l.appendChild(c);let d=document.createElement("select");d.classList.add("taskPriority"),l.appendChild(d),d.addEventListener("change",(n=>{"No Priority"==n.currentTarget.value?(n.currentTarget.value=a.value,e.priority=n.currentTarget.value,l.style.borderColor="black",console.log(t),a.blur()):"Low Priority"==n.currentTarget.value?(n.currentTarget.value=s.value,e.priority=n.currentTarget.value,l.style.borderColor="green",console.log(t),s.blur()):"High Priority"==n.currentTarget.value&&(n.currentTarget.value=u.value,e.priority=n.currentTarget.value,l.style.borderColor="red",console.log(t),u.blur())}));let a=document.createElement("option");a.classList.add("noPriority"),a.value="No Priority",a.textContent="No Priority",d.appendChild(a);let s=document.createElement("option");s.classList.add("lowPriority"),s.value="Low Priority",s.textContent="Low Priority",d.appendChild(s);let u=document.createElement("option");u.classList.add("highPriority"),u.value="High Priority",u.textContent="High Priority",d.appendChild(u);let p=document.createElement("input");p.classList.add("showDueDate"),p.type="Date",p.value=e.dueDate,l.appendChild(p),p.addEventListener("change",(t=>{t.currentTarget.value=p.value,e.dueDate=t.currentTarget.value,console.log(e)})),r.addEventListener("keypress",(n=>{"Enter"==n.key&&(e.title=r.value,e.description=c.value,e.priority=d.value,e.dueDate=p.value,console.log(t),r.blur())})),c.addEventListener("keypress",(n=>{"Enter"==n.key&&(e.title=r.value,e.description=c.value,e.priority=d.value,e.dueDate=p.value,console.log(t),c.blur())})),"High Priority"==e.priority?(l.style.borderColor="red",u.selected=!0):"Low Priority"==e.priority?(l.style.borderColor="green",s.selected=!0):l.style.borderColor="black";let m=document.createElement("button");m.classList.add("taskDelete"),m.textContent="X",l.appendChild(m),m.addEventListener("click",(()=>{o.splice(i,1),l.remove(),console.log(i),console.log(e),console.log(o)}))}))}!function(){const e=document.querySelector(".projectContainer"),o=document.createElement("div");o.textContent="Default",e.appendChild(o),document.querySelector(".contentHeader").textContent=o.textContent,document.getElementById("taskButton").style.visibility="visibile";let l=o.textContent,r=new n(l);t.push(r),i(),console.log(t)}(),function(){const e=document.querySelector(".projectFormContainer"),t=document.querySelector(".projectButton"),n=document.getElementById("projectName");t.addEventListener("click",(()=>{n.value="",e.style.visibility="visible"}))}(),function(){const e=document.getElementById("submitProject"),o=document.querySelector(".projectContainer");e.addEventListener("click",(()=>{o.innerHTML="",o.textContent="Projects";let e=document.getElementById("projectName").value,l=new n(e);t.push(l),console.log(t),i(),document.querySelector(".projectFormContainer").style.visibility="hidden"}))}(),function(){const e=document.getElementById("cancelProject"),t=document.querySelector(".projectFormContainer");e.addEventListener("click",(()=>{t.style.visibility="hidden"}))}(),document.querySelector(".allTasks").addEventListener("click",(()=>{e(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,