(()=>{let e=[];document.querySelector(".addProject").addEventListener("click",(()=>{let n=document.querySelector(".formContainer");if(n.children.length<1){let d=document.createElement("div");d.classList.add("addProjectForm"),n.appendChild(d);let a=document.createElement("input");a.classList.add("projectNameInput"),a.maxLength=25,d.appendChild(a);let c=document.createElement("button");c.classList.add("projectAddInput"),c.textContent="Add",d.appendChild(c),c.addEventListener("click",(()=>{const n=document.querySelector(".projects");if(""!=a.value){{const d=document.createElement("div");d.textContent=a.value,d.setAttribute("id",`${a.value}`),d.classList.add("projectHeader"),n.appendChild(d),function(){let n=document.querySelector(".projects");Array.from(n.children).forEach(((n,d)=>{n.addEventListener("click",(()=>{const a=document.querySelector(".content");a.innerHTML="";const c=document.createElement("div");c.classList.add("contentHeader"),c.textContent=n.textContent,a.appendChild(c);const i=document.createElement("div");function l(){let t=e.at(d);console.log(t)}i.classList.add("todoContainer"),a.appendChild(i),l();let o=document.createElement("button");o.classList.add("addTaskButton"),o.textContent="Add Task",a.appendChild(o),o.addEventListener("click",(()=>{if(null==document.querySelector(".addTaskContainer")){let d=document.createElement("div");d.classList.add("addTaskContainer"),a.appendChild(d);let c=document.createElement("input");c.classList.add("addTaskTitle"),c.placeholder="Title",d.appendChild(c);let o=document.createElement("input");o.classList.add("addTaskDescription"),o.placeholder="Description",d.appendChild(o);let r=document.createElement("select");r.classList.add("addTaskPriority"),r.textContent="Priority",d.appendChild(r);let s=document.createElement("option");s.setAttribute("id","priorityHigh"),s.textContent="High priority",r.appendChild(s);let u=document.createElement("option");u.setAttribute("id","priorityLow"),u.textContent="Low priority",r.appendChild(u);let p=document.createElement("button");p.setAttribute("id","submitTask"),p.textContent="Submit",d.appendChild(p),p.addEventListener("click",(()=>{let d=n.textContent,a=c.value,s=o.value,u=r.value,p=new t(d,a,s,u),m=[];m.push(p),e.push(m);let C=document.createElement("div");C.classList.add("toDo"),i.appendChild(C),C.textContent="test",l()}));let m=document.createElement("button");m.setAttribute("id","cancelTask"),m.textContent="Cancel",d.appendChild(m),m.addEventListener("click",(()=>{document.querySelector(".addTaskContainer").remove()}))}})),console.log(e)}))}))}()}a.value=""}}));let i=document.createElement("button");i.classList.add("projectCancelInput"),i.textContent="Cancel",d.appendChild(i),i.addEventListener("click",(()=>{n.innerHTML=""}))}}));class t{constructor(e,t,n,d,a){this.project=e,this.title=t,this.description=n,this.priority=d,this.dueDate=a}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,